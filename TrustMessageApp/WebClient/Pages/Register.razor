@page "/register"
@using BaseLibrary.DTOs
@using WebClient.Services
@inject NavigationManager Navigation
@inject AuthService AuthService

<h3>Register</h3>

<EditForm Model="@registerRequest" OnValidSubmit="HandleRegister">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Username</label>
        <InputText @bind-Value="registerRequest.Username" class="form-control" />
    </div>

    <div class="form-group">
        <label>Email</label>
        <InputText @bind-Value="registerRequest.Email" class="form-control" />
    </div>

    <div class="form-group">
        <label>Password</label>
        <InputText type="password" @bind-Value="registerRequest.Password" class="form-control" />
    </div>

    <button type="submit" class="btn btn-primary">Register</button>
</EditForm>

@if (!string.IsNullOrEmpty(qrCodeUri))
{
    <div class="mt-3">
        <h4>Scan this QR Code for 2FA:</h4>
        <img src="@qrCodeImageUrl" alt="QR Code" />
        <p>After scanning, you can <a href="/login">login</a></p>
    </div>
}

@code {
    private RegisterRequestDTO registerRequest = new();
    private string qrCodeUri;
    private string qrCodeImageUrl;

    private async Task HandleRegister()
    {
        qrCodeUri = await AuthService.RegisterAsync(registerRequest);
        if (!string.IsNullOrEmpty(qrCodeUri))
        {
            // Generate QR code as a Base64 image
            qrCodeImageUrl = GenerateQrCode(qrCodeUri);
        }
    }

    private string GenerateQrCode(string uri)
    {
        using var qrGenerator = new QRCoder.QRCodeGenerator();
        var qrCodeData = qrGenerator.CreateQrCode(uri, QRCoder.QRCodeGenerator.ECCLevel.Q);
        var qrCode = new QRCoder.PngByteQRCode(qrCodeData);
        var qrCodeBytes = qrCode.GetGraphic(20);

        // Convert QR code bytes to Base64 string
        return $"data:image/png;base64,{Convert.ToBase64String(qrCodeBytes)}";
    }
}
